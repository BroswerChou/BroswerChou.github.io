<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pycharm远程连接服务器环境配置</title>
      <link href="/2025/04/09/pycharm%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/04/09/pycharm%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="MobaXterm创建普通用户"><a href="#MobaXterm创建普通用户" class="headerlink" title="MobaXterm创建普通用户"></a>MobaXterm创建普通用户</h4><p>切换管理员 sudo -s<br>增加新用户 adduser username<br>输入密码、<br>查看目录 ls -l &#x2F;home,出现username目录名即为成功</p><h4 id="Linux服务器上面安装Anaconda"><a href="#Linux服务器上面安装Anaconda" class="headerlink" title="Linux服务器上面安装Anaconda"></a>Linux服务器上面安装Anaconda</h4><p>1、下载anaconda安装包，并将其移入Linux环境中<br>2、使用chmod +x Anaconda3-2023.09-0-Linux-x86_64.sh命令赋予权限<br>3、使用.&#x2F;Anaconda3-5.3.0-Linux-x86_64.sh执行安装<br>4、一直Enter+yes<br>5、重新打开终端，输入conda -V查看<br>如果显示does not exit ，请执行chown wj:wj -R &#x2F;home&#x2F;wj这条语句，wj改为自己的用户名</p><h4 id="配置pytorch"><a href="#配置pytorch" class="headerlink" title="配置pytorch"></a>配置pytorch</h4><p>conda create -n 用户名 python&#x3D;xxx<br>conda activate 用户名<br>pip或者conda安装pytorch相关包</p><h4 id="linux中cuda-toolkit安装方法："><a href="#linux中cuda-toolkit安装方法：" class="headerlink" title="linux中cuda toolkit安装方法："></a>linux中cuda toolkit安装方法：</h4><p>1、进入以下网址，选择对应的版本<a href="https://developer.nvidia.com/">https://developer.nvidia.com</a><br>2、执行所给出的命令。如果显示xx不在sudoers文件中，执行下面命令：<br>Su root，输入root密码后执行usermod -aG sudo zyt，即可给权限，在安装即可<br>3、cd &#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;bin进入文件夹，ls -la查看所有文件，执行.&#x2F;nvcc –version可以查看版本，然后cd ~返回主文件夹<br>4、sudo nano .bashrc进入编辑，修改路径<br>5、在最后一行加上 export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.8&#x2F;bin${PATH:+:${PATH}}保存之后重新打开一个终端即可</p><p>安装好cuda tookit之后出现新的问题：<br>NO cuda runtime is found. CUDA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.X<br>尝试 (1)export FORCE_CUDA&#x3D;1没用<br>尝试 (2)export CUDA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-11.X无用<br>尝试 (3)切换不同的torch版本进行尝试无用</p><h4 id="Conda-相关命令"><a href="#Conda-相关命令" class="headerlink" title="Conda 相关命令"></a>Conda 相关命令</h4><p>import torch<br>print(torch.cuda.is_available())  # 是否检测到 CUDA<br>print(torch.version.cuda)         # 检查 PyTorch 绑定的 CUDA 版本<br>print(torch.backends.cudnn.version())  # 检查 cuDNN 版本（如果可用）<br>import torch<br>print(torch.cuda.is_available())  # 检查是否检测到 CUDA 设备<br>print(torch.cuda.device_count())  # 检查 GPU 数量<br>print(torch.cuda.get_device_name(0))  # 获取第一个 GPU 的名称<br>import torch</p><p>print(“CUDA available:”, torch.cuda.is_available())<br>print(“CUDA version:”, torch.version.cuda)<br>print(“cuDNN version:”, torch.backends.cudnn.version())<br>print(“GPU device name:”, torch.cuda.get_device_name(0))<br>print(“Current GPU:”, torch.cuda.current_device())</p><h6 id="创建一个张量并移动到-GPU，测试计算是否正常"><a href="#创建一个张量并移动到-GPU，测试计算是否正常" class="headerlink" title="创建一个张量并移动到 GPU，测试计算是否正常"></a>创建一个张量并移动到 GPU，测试计算是否正常</h6><p>x &#x3D; torch.randn(2, 3).cuda()<br>print(“Tensor on GPU:”, x.device)</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo和github创建博客</title>
      <link href="/2025/04/07/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/04/07/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="github上面创建仓库"><a href="#github上面创建仓库" class="headerlink" title="github上面创建仓库"></a>github上面创建仓库</h1><p>在github上面创建一个新的仓库包含两个分支main和hexo，仓库名称为”用户名.github.io”<br>main分支用来存储生成的静态网页，进行Github Pages展示；<br>hexo分支用来存储hexo源码，进行写作和生成网页;</p><h1 id="hexo下载"><a href="#hexo下载" class="headerlink" title="hexo下载"></a>hexo下载</h1><p>创建一个新的文件夹用于存储博客信息<br>打开命令行窗口或者git bash进入到该文件夹下<br>输如npm i hexo-cli -g安装hexo<br>安装完成后输入hexo -V验证是否安装成功<br>输入hexo init初始化文件夹<br>输入npm install安装相关组件<br>输入hexo clean清楚冗余文件、输出hexo g生成静态网页、输入hexo s在本地预览</p><h2 id="1、确保你的-Hexo-项目能正常生成和部署"><a href="#1、确保你的-Hexo-项目能正常生成和部署" class="headerlink" title="1、确保你的 Hexo 项目能正常生成和部署"></a>1、确保你的 Hexo 项目能正常生成和部署</h2><p>‘’’<br>hexo clean<br>hexo g<br>npm install hexo-deployer-git –save<br>‘’’</p><h2 id="2、配置-Hexo-让它把-public-推送到-main-分支"><a href="#2、配置-Hexo-让它把-public-推送到-main-分支" class="headerlink" title="2、配置 Hexo 让它把 public&#x2F; 推送到 main 分支"></a>2、配置 Hexo 让它把 public&#x2F; 推送到 main 分支</h2><p>‘’’<br>deploy:<br>  type: git<br>  repo: <a href="https://github.com/BroswerChou/BroswerChou.github.io.git">https://github.com/BroswerChou/BroswerChou.github.io.git</a><br>  branch: main<br>‘’’<br>注意repo需要根据使用的是http或者ssh选择不同的链接,branch: main 表示将静态文件推送到 main 分支</p><h2 id="3、把博客源码推送到-hexo-分支"><a href="#3、把博客源码推送到-hexo-分支" class="headerlink" title="3、把博客源码推送到 hexo 分支"></a>3、把博客源码推送到 hexo 分支</h2><p>‘’’<br>初始化本地 Git 仓库（如果还没做）:<br>git init<br>git remote add origin <a href="https://github.com/BroswerChou/BroswerChou.github.io.git">https://github.com/BroswerChou/BroswerChou.github.io.git</a></p><p>创建 hexo 分支并切换过去：<br>git checkout -b hexo</p><p>把当前 Hexo 项目的源代码（除了 public&#x2F;）推送到 GitHub 的 hexo 分支:<br>忽略 public 目录<br>echo “public&#x2F;“ &gt;&gt; .gitignore</p><p>正常提交<br>git add .<br>git commit -m “Hexo 源码初始化”<br>git push origin hexo<br>‘’’</p><h2 id="4、部署博客（生成-推送-public-到-main）"><a href="#4、部署博客（生成-推送-public-到-main）" class="headerlink" title="4、部署博客（生成 + 推送 public 到 main）:"></a>4、部署博客（生成 + 推送 public 到 main）:</h2><p>‘’’<br>hexo clean<br>hexo g<br>hexo d<br>‘’’</p><h2 id="5、启用-GitHub-Pages"><a href="#5、启用-GitHub-Pages" class="headerlink" title="5、启用 GitHub Pages"></a>5、启用 GitHub Pages</h2><p>打开你的仓库、点击右上角 Settings、找到左侧栏的 Pages 或 Pages and Deployment、设置 Source 为：Deploy from a branch → 分支选择 main → 路径保持 &#x2F; (root)、等几分钟后，访问：👉 <a href="https://xxx.github.io/">https://xxx.github.io</a></p><h2 id="部署脚本（一键完成）"><a href="#部署脚本（一键完成）" class="headerlink" title="部署脚本（一键完成）"></a>部署脚本（一键完成）</h2><p>可以在根目录下新建一个 deploy.sh 脚本文件（适用于 Git Bash 或 Linux &#x2F; Mac）：<br>执行：bash deploy.sh，一键完成源码和部署。<br>‘’’<br>#!&#x2F;bin&#x2F;bash<br>hexo clean<br>hexo g<br>hexo d<br>git add .<br>git commit -m “更新博客源码”<br>git push origin hexo<br>‘’’</p><h1 id="写博客文章并发布"><a href="#写博客文章并发布" class="headerlink" title="写博客文章并发布"></a>写博客文章并发布</h1><p>1、创建文章：hexo new post “我的第一篇博客”，会在source&#x2F;_posts&#x2F; 目录下创建一个新的 Markdown 文件<br>2、编写文章：进入.md文档内编写<br>3、生成静态文件：<br>‘’’<br>hexo clean<br>hexo g<br>‘’’<br>4、提交文章到Github：<br>4.1 在hexo分支下面提交博客<br>‘’’<br>确保你在 hexo 分支<br>git checkout hexo</p><p>添加新文件<br>git add .</p><p>提交<br>git commit -m “添加第一篇博客”</p><p>推送到 GitHub<br>git push origin hexo<br>‘’’<br>4.2 部署到main分支：hexo d<br>这条命令会将 public&#x2F; 文件夹中的静态文件部署到 GitHub 仓库的 main 分支，从而在 GitHub Pages 上展示你的博客。<br>5、查看博客：https:&#x2F;&#x2F;你的GitHub用户名.github.io</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/07/hello-world/"/>
      <url>/2025/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
